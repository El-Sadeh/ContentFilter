/* ShapeType_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++03 -example <arch> ShapeType.idl

Example subscription of type ShapeTypeExtended automatically generated by 
'rtiddsgen'. To test them, follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service  with the command
objs/<arch>/ShapeType_subscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/ShapeType_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On UNIX systems: 

objs/<arch>/ShapeType_publisher <domain_id> 
objs/<arch>/ShapeType_subscriber <domain_id> 

On Windows systems:

objs\<arch>\ShapeType_publisher <domain_id>  
objs\<arch>\ShapeType_subscriber <domain_id>   

*/

#include <algorithm>
#include <iostream>
#include <string>

#include <dds/sub/ddssub.hpp>
#include <dds/core/ddscore.hpp>
// Or simply include <dds/dds.hpp> 

#include "ShapeType.hpp"

class ShapeTypeExtendedReaderListener : public dds::sub::NoOpDataReaderListener<ShapeTypeExtended> {
  public:

    ShapeTypeExtendedReaderListener() : count_ (0)
    {
    }

    void on_data_available(dds::sub::DataReader<ShapeTypeExtended>& reader)
    {
        // Take all samples
        dds::sub::LoanedSamples<ShapeTypeExtended> samples = reader.take();

        for ( dds::sub::LoanedSamples<ShapeTypeExtended>::iterator sample_it = samples.begin();
        sample_it != samples.end(); sample_it++) {

            if (sample_it->info().valid()){
                count_++;
                std::cout << sample_it->data() << std::endl; 
            }        
        }      
    }

    int count() const
    {
        return count_;
    }

  private:
    int count_;
};

void subscriber_main(int domain_id, int sample_count)
{
    // Create a DomainParticipant with default Qos
    dds::domain::DomainParticipant participant(domain_id);

    // Create a Topic -- and automatically register the type
    dds::topic::Topic<ShapeTypeExtended> topic(participant, "Square");


	//******** The parameter of half the screen ********
	std::vector<std::string> yAxisFilteringThreshold(2);
	yAxisFilteringThreshold[0] = "0";  // 0 is the top of the screen's y axis  
	yAxisFilteringThreshold[1] = "250"; //250 is the bottom of the screen's y axis
	

    // Create a DataReader with default Qos (Subscriber created in-line)
    ShapeTypeExtendedReaderListener listener;

	//Create a filter called "yFilter"
	dds::topic::Filter yFilter("y > %0 AND y < %1", yAxisFilteringThreshold);

	//Create a dedicated topic for the content filter ("cft_topic") based on the original 
	//		topic sent by the publisher ("topic") with the filter "yfilter".
	// NOTE: The filter part can be done inline, like the following commented lines:
	/*
		cft_topic = dds::topic::ContentFilteredTopic<ShapeTypeExtended>(
		topic,
		"ContentFilteredTopic",
		THE INLINE FILTER --> dds::topic::Filter("y > %0 AND y < %1", yAxisFilteringThreshold));  <--THE INLINE FILTER
		*/
	dds::topic::ContentFilteredTopic<ShapeTypeExtended> cft_topic = dds::core::null;	
	cft_topic = dds::topic::ContentFilteredTopic<ShapeTypeExtended>(
		topic,
		"ContentFilteredTopic",
		yFilter);

	//Now create a data reader for the original topic, so that the content filter's 
	// dedicated topic ("cft_topic") would connect to
	dds::sub::DataReader<ShapeTypeExtended> reader(
		dds::sub::Subscriber(participant),
		cft_topic,
		dds::core::QosProvider::Default().datareader_qos(),
		&listener,
		dds::core::status::StatusMask::data_available());





	short tenSecondCounter = 0;
    while (listener.count() < sample_count || sample_count == 0) 
	{
		if (tenSecondCounter == 0)
		{
			rti::util::sleep(dds::core::Duration(10));
			std::cout << "*******************************************" << std::endl;
			std::cout << "*  Changing filter: Showing TOP half only *" << std::endl; 
			std::cout << "*******************************************" << std::endl;
			tenSecondCounter++; 


			//change filter to show the upper part
			yAxisFilteringThreshold[0] = "0";
			yAxisFilteringThreshold[1] = "125";
			cft_topic.filter_parameters(yAxisFilteringThreshold.begin(), yAxisFilteringThreshold.end());


			//After another 10 seconds change to show the lower part		
			rti::util::sleep(dds::core::Duration(10));
			std::cout << "**********************************************" << std::endl;
			std::cout << "*  Changing filter: Showing BOTTOM half only *" << std::endl;
			std::cout << "**********************************************" << std::endl;
			tenSecondCounter++;
			
			yAxisFilteringThreshold[0] = "125";
			yAxisFilteringThreshold[1] = "250";
			cft_topic.filter_parameters(yAxisFilteringThreshold.begin(), yAxisFilteringThreshold.end());
		}

        
    }

    // Unset the listener to allow the reader destruction
    // (rti::core::ListenerBinder can do this automatically)
    reader.listener(NULL, dds::core::status::StatusMask::none());  
}

int main(int argc, char *argv[])
{

    int domain_id = 0;
    int sample_count = 0; // infinite loop

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    // To turn on additional logging, include <rti/config/Logger.hpp> and
    // uncomment the following line:
    // rti::config::Logger::instance().verbosity(rti::config::Verbosity::STATUS_ALL);

    try {
        subscriber_main(domain_id, sample_count);
    } catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in subscriber_main(): " << ex.what() << std::endl;
        return -1;
    }

    // RTI Connext provides a finalize_participant_factory() method
    // if you want to release memory used by the participant factory singleton.
    // Uncomment the following line to release the singleton:
    //
    // dds::domain::DomainParticipant::finalize_participant_factory();

    return 0;
}

